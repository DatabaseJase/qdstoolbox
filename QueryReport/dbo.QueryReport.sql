SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

----------------------------------------------------------------------------------
-- Procedure Name: [dbo].[QueryReport]
--
-- Desc: This procedure generates multiple reports based on QDS data for a given Object or QueryID
--
-- Parameters:
--	INPUT
--		@ServerIdentifier		SYSNAME			--	Identifier assigned to the server.
--													[Default: @@SERVERNAME]
--
--		@DatabaseName			SYSNAME			--	Name of the database from where statistics are being extracted
--													[Default: DB_NAME()]
--
--		@ObjectName				NVARCHAR(MAX)	--	Full name (schema.object) of the object whose statistics are being extracted
--													[Default: NULL] (Only used when extracting stats from a selected object)
--
--		@QueryIDList			NVARCHAR(MAX)	--	Comma-separated list of query IDs to generate the report for
--													[Default: NULL]
--
--		@QueryID				NVARCHAR(MAX)	--	Query ID to generate the report for
--													[Default: NULL]
--
--		@StartTime				DATETIME2		--	Start time for the interval to analyze
--													[Default: DATEADD(HOUR, -1, GETUTCDATE()) ]
--
--		@EndTime				DATETIME2		--	End time for the interval to analyze
--													[Default: GETUTCDATE() ]
--
--
--
--		@IntervalReports		BIT				--	Flag to enable the report details per runtime stats interval
--													[Default: 0]
--
--		@AggregatedReports		BIT				--	Flag to enable the simplified reports aggregated at the whole @StartTime - @EndTime interval
--													[Default: 0]
--			@IntervalReports & AggregatedReports are not mutually exclusive: when both are selected, two sets of reports will be generated
--
--
--
--		@PlanAggregation		BIT				--	Flag to enable the report at the plan level
--													[Default: 0]
--
--		@QueryAggregation		BIT				--	Flag to enable the report at the query level
--													[Default: 0]
--
--		@ObjectAggregation		BIT				--	Flag to enable the report at the object level
--													[Default: 0]
--			@PlanAggregation, @QueryAggregation & @ObjectAggregation are not mutually exclusive: when multiple are selected separate reports will be generated for each
--
--
--
--		@PlanDetails			BIT				--	Flag to print the plan details (contents of [sys].[query_store_plan])
--													[Default: 0]
--
--		@QueryDetails			BIT				--	Flag to print the query details, including the query_id / query_text_id / plan_id relation and the contents of [sys].[query_store_query_text]
--													[Default: 0]
--
--		@ObjectDetails			BIT				--	Flag to print the object definition (using sp_helptext)
--													[Default: 0]
--
--			@PlanDetails, @QueryDetails & @ObjectDetails are independent of the reports based on statistics, and any or none of them can be enabled
--
--
--
--		@Averages				BIT				--	Flag to generate reports with average metrics based on the # of executions (doesn't apply to Object-level reports)
--													[Default: 0]
--
--		@Totals					BIT				--	Flag to generate reports with total metrics
--													[Default: 0]
--
--			@Averages & @Totals are not mutually exclusive, generating separate reports (although @Averages doesn't apply to Object-level reports)
--
--
--
--		@RuntimeStats			BIT				--	Flag to generate reports with metrics extracted from [sys].[query_store_runtime_stats]
--													[Default: 0]
--
--		@WaitStats				BIT				--	Flag to generate reports with metrics extracted from [sys].[query_store_wait_stats]
--													[Default: 0]
--
--			When both @RuntimeStats and @WaitStats flags are enabled the reports will be a combination on both rather than separate reports for each set of metrics.
--			When both are disabled no metrics-based reports will be generated.
--
--
--
--		@VerboseMode			BIT				--	Prints out the dynamic SQL commands generated by the SP
--													[Default: 0]
--
-- 
-- Sample execution 1:
--		Get the runtime statistics of every query part of the [Db01].[Sche].[Obj01] between '2021-01-01 00:00' and '2021-01-07 00:00'
--		detailed at the query level for each interval set for the [Db01] query store interval, with averages based on the # of executions
--		of each query
--	EXECUTE [dbo].[QueryReport]
--		 @DatabaseName		=	'Db01'
--		,@ObjectName		=	'[Sch01].[Obj01]'
--		,@StartTime			=	'2021-01-01 00:00'
--		,@EndTime			=	'2021-01-07 00:00'
--		,@IntervalReports	=	1
--		,@QueryAggregation	=	1
--		,@Averages			=	1
--		,@RuntimeStats		=	1
--
-- Sample execution 2:
--		Get the wait statistics of the plan ID 1234 on database [Db02] aggregated for the whole interval between '2021-06-01 00:00' and '2021-06-01 06:00'
--		obtaining both the average waits and total waits in separate reports
--	EXECUTE [dbo].[QueryReport]
--		 @DatabaseName		=	'Db02'
--		,@PlanID			=	1234
--		,@StartTime			=	'2021-06-01 00:00'
--		,@EndTime			=	'2021-06-01 06:00'
--		,@AggregatedReports	=	1
--		,@PlanAggregation	=	1
--		,@Averages			=	1
--		,@Totals			=	1
--		,@WaitStats			=	1
--
-- Sample execution 3:
--		Get both the runtime wait statistics of two query IDs (1534 and 3342) on database [Db03] aggregated for the whole interval 
--		between '2021-06-01 00:00' and '2021-06-03 00:00' obtaining average runtime & wait stats in a single combined report
--	EXECUTE [dbo].[QueryReport]
--		 @DatabaseName		=	'Db03'
--		,@QueryIDList		=	'1534,3342'
--		,@StartTime			=	'2021-06-01 00:00'
--		,@EndTime			=	'2021-06-03 00:00'
--		,@AggregatedReports	=	1
--		,@QueryAggregation	=	1
--		,@Averages			=	1
--		,@RuntimeStats		=	1
--		,@WaitStats			=	1
--
--
--
--
-- Date: 2021.08.17
-- Auth: Pablo Lozano (@sqlozano)
--
-- Date: 2021.08.20
-- Auth: Pablo Lozano (@sqlozano)
-- Changes: Missing data when joining runtime & wait stats (@RuntimeStats = 1 and @WaitStats = 1)
--
-- Date: 2021.10.11
-- Auth: Pablo Lozano (@sqlozano)
-- Changes: Shortened "Average" to "Avg" column names to prevent query truncation
----------------------------------------------------------------------------------

CREATE OR ALTER PROCEDURE [dbo].[QueryReport]  
(  
	 @ServerIdentifier		SYSNAME			=	NULL
	,@DatabaseName			SYSNAME			=	NULL
	,@ObjectName			NVARCHAR(MAX)	=	NULL
	,@QueryIDList			NVARCHAR(MAX)	=	NULL
	,@QueryID				BIGINT			=	NULL
	,@StartTime				DATETIME2		=	NULL
	,@EndTime				DATETIME2		=	NULL
	,@IntervalReports		BIT				=	0
	,@AggregatedReports		BIT				=	0
	,@PlanAggregation		BIT				=	0
	,@QueryAggregation		BIT				=	0
	,@ObjectAggregation		BIT				=	0
	,@PlanDetails			BIT				=	0
	,@QueryDetails			BIT				=	0
	,@ObjectDetails			BIT				=	0
	,@Averages				BIT				=	0
	,@Totals				BIT				=	0
	,@RuntimeStats			BIT				=	0
	,@WaitStats				BIT				=	0
	,@VerboseMode			BIT				=	0
)  
AS  
BEGIN  
SET NOCOUNT ON  

-- Get the Version # to ensure it can run
DECLARE @Version INT =  CAST(SUBSTRING(CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')),0,CHARINDEX('.',CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')),0)) AS INT)
IF (@Version < 13)
BEGIN
	RAISERROR('[dbo].[QueryReport] requires SQL 2016 or higher',16,1)
	RETURN -1
END

IF ( (@Version < 14) AND (@WaitStats = 1) )
BEGIN
	RAISERROR('[dbo].[QueryReport] requires SQL 2017 or higher to use @WaitStats = 1',16,1)
	RETURN -1
END

-- If no @ServerIdentifier is provided, use @@SERVERNAME - START
IF (@ServerIdentifier IS NULL) OR (@ServerIdentifier = '')
	SET @ServerIdentifier = @@SERVERNAME
-- If no @ServerIdentifier is provided, use @@SERVERNAME - END

-- If no @DatabaseName is provided, use current one - START
IF (@DatabaseName IS NULL) OR (@DatabaseName = '')
	SET @DatabaseName = DB_NAME()
-- If no @DatabaseName is provided, use current one - END

-- Verify state of the database - START
IF NOT EXISTS(SELECT 1 FROM [sys].[databases] WHERE [name] = @DatabaseName)
BEGIN
	RAISERROR('The database [%s] does not exist', 16, 0, @DatabaseName)
	RETURN
END

IF EXISTS
(
	SELECT  
		1
	FROM [sys].[databases] [d]
	LEFT OUTER JOIN [sys].[availability_databases_cluster] [adc]
		ON d.name = adc.database_name
	LEFT OUTER JOIN sys.availability_replicas ar 
		ON ar.group_id = adc.group_id
	LEFT OUTER JOIN sys.dm_hadr_availability_replica_states dhars 
		ON dhars.group_id = ar.group_id
	WHERE  d.state_desc = 'ONLINE'
	AND dhars.is_local = 1 AND dhars.role_desc = 'SECONDARY'
	AND ar.secondary_role_allow_connections_desc = 'READ_ONLY'
	AND [d].[name] = @DatabaseName
)
	RAISERROR('The database [%s] is on secondary replica with READ_ONLY connections allowed only. If this SP returns any failure, ensure this connection is a read_only one', 0, 1, @DatabaseName)


IF NOT EXISTS
(
	SELECT  
		1
	FROM [sys].[databases] [d]
	LEFT OUTER JOIN [sys].[availability_databases_cluster] [adc] 
		ON [d].[name] = [adc].[database_name]
	LEFT OUTER JOIN [sys].[availability_replicas] [ar] 
		ON [ar].[group_id] = [adc].[group_id]
	LEFT OUTER JOIN [sys].[dm_hadr_availability_replica_states] [dhars]
		ON [dhars].[group_id] = [ar].[group_id]
	WHERE [d].[state_desc] = 'ONLINE'
	AND [dhars].[is_local] IS NULL
	AND [d].[name] = @DatabaseName
	UNION ALL
	SELECT  
		1
	FROM [sys].[databases] d
	LEFT OUTER JOIN [sys].[availability_databases_cluster] [adc] 
		ON [d].[name] = [adc].[database_name]
	LEFT OUTER JOIN [sys].[availability_replicas] [ar] 
		ON [ar].[group_id] = [adc].[group_id]
	LEFT OUTER JOIN [sys].[dm_hadr_availability_replica_states] [dhars] 
		ON [dhars].[group_id] = [ar].[group_id]
	WHERE [d].[state_desc] = 'ONLINE'
	AND [dhars].[is_local] = 1 AND [dhars].[role_desc] = 'PRIMARY'
	AND [d].[name] = @DatabaseName
	UNION ALL
	SELECT  
		1
	FROM [sys].[databases] d
	LEFT OUTER JOIN [sys].[availability_databases_cluster] [adc] 
		ON [d].[name] = [adc].[database_name]
	LEFT OUTER JOIN [sys].[availability_replicas] [ar] 
		ON [ar].[group_id] = [adc].[group_id]
	LEFT OUTER JOIN [sys].[dm_hadr_availability_replica_states] [dhars] 
		ON [dhars].[group_id] = [ar].[group_id]
	WHERE  [d].[state_desc] = 'ONLINE'
	AND [dhars].[is_local] = 1 AND [dhars].[role_desc] = 'SECONDARY'
	AND [ar].secondary_role_allow_connections_desc IN ('ALL', 'READ_ONLY')
	AND [d].[name] = @DatabaseName
)
BEGIN
	RAISERROR('The database [%s] cannot be accessed: please check its status', 11, 1, @DatabaseName)
	RETURN
END
-- Verify state of the database - END


-- Verify one and only one parameter is provided to generate the report - START
IF	(@ObjectName	IS NULL)	AND	(@QueryIDList	IS NULL)	AND	(@QueryID	IS NULL)
BEGIN
	RAISERROR('No parameters have been provided to generate a report', 11, 1)
	RETURN
END

IF	
(
	(@ObjectName	IS NOT NULL)	AND	(	(@QueryIDList	IS NOT NULL)	OR	(@QueryID		IS NOT NULL)	)
	OR
	(@QueryIDList	IS NOT NULL)	AND	(	(@ObjectName	IS NOT NULL)	OR	(@QueryID		IS NOT NULL)	)
	OR
	(@QueryID		IS NOT NULL)	AND	(	(@ObjectName	IS NOT NULL)	OR	(@QueryIDList	IS NOT NULL)	)

)
BEGIN
	RAISERROR('Only one parameter (@ObjectName, @QueryIDList or @QueryID) can be provided', 11, 1)
	RETURN
END
-- Verify one and only one parameter is provided to generate the report - END

-- Set default values for @StartTime and @EndTime - START
IF (@StartTime IS NULL) OR (@EndTime IS NULL)
BEGIN
	SET @StartTime	= DATEADD(HOUR,-1, GETUTCDATE())
	SET	@EndTime	= GETUTCDATE()
END
-- Set default values for @StartTime and @EndTime - END

DECLARE @GetResults VARCHAR(8000)


-- Get list of QueryIDs, PlanIDs and QueryTextIDs to be analyzed - START
DROP TABLE IF EXISTS #QueryPlanIDs
CREATE TABLE #QueryPlanIDs
(
	 [QueryID]		BIGINT
	,[PlanID]		BIGINT
	,[QueryTextID]	BIGINT
)

DECLARE @PopulateQueryPlanIDs NVARCHAR(MAX) 

IF (@ObjectName IS NOT NULL)
BEGIN
	SET @ObjectName = REPLACE(@ObjectName, '[', '')
	SET @ObjectName = REPLACE(@ObjectName, ']', '')
	SET @PopulateQueryPlanIDs =
	'USE [{@DatabaseName}];
	INSERT INTO #QueryPlanIDs ([QueryID], [PlanID], [QueryTextID])
	SELECT [qsq].[query_id], [qsp].[plan_id], [qsq].[query_text_id]
	FROM [sys].[query_store_plan] [qsp]
	INNER JOIN [sys].[query_store_query] [qsq]
	ON [qsp].[query_id] = [qsq].[query_id]
	INNER JOIN [sys].[objects] [o]
	ON [qsq].[object_id] = [o].[object_id]
	INNER JOIN [sys].[schemas] [r]
	ON [o].[schema_id] = [r].[schema_id]
	WHERE [r].[name] + ''.'' + [o].[name] = ''{@ObjectName}'''
	SET @PopulateQueryPlanIDs = REPLACE(@PopulateQueryPlanIDs,	'{@DatabaseName}',	@DatabaseName)
	SET @PopulateQueryPlanIDs = REPLACE(@PopulateQueryPlanIDs,	'{@ObjectName}',	@ObjectName)
END

IF (@QueryIDList IS NOT NULL)
BEGIN
	DROP TABLE IF EXISTS #QueryIDList 
	CREATE TABLE #QueryIDList
	(
		[QueryID]	BIGINT
	)
	INSERT INTO #QueryIDList ([QueryID])
	SELECT CAST([value] AS BIGINT)
	FROM STRING_SPLIT(@QueryIDList,',')

	SET @PopulateQueryPlanIDs =
	'USE [{@DatabaseName}];
	INSERT INTO #QueryPlanIDs ([QueryID], [PlanID], [QueryTextID])
	SELECT [qsq].[query_id], [qsp].[plan_id], [qsq].[query_text_id]
	FROM [sys].[query_store_plan] [qsp]
	INNER JOIN [sys].[query_store_query] [qsq]
	ON [qsp].[query_id] = [qsq].[query_id]
	INNER JOIN #QueryIDList [q]
	ON [qsq].[query_id] = [q].[QueryID]'
	SET @PopulateQueryPlanIDs = REPLACE(@PopulateQueryPlanIDs,	'{@DatabaseName}',	@DatabaseName)
END

IF (@QueryID IS NOT NULL)
BEGIN
	SET @PopulateQueryPlanIDs =
	'USE [{@DatabaseName}];
	INSERT INTO #QueryPlanIDs ([QueryID], [PlanID], [QueryTextID])
	SELECT [qsq].[query_id], [qsp].[plan_id], [qsq].[query_text_id]
	FROM [sys].[query_store_plan] [qsp]
	INNER JOIN [sys].[query_store_query] [qsq]
	ON [qsp].[query_id] = [qsq].[query_id]
	WHERE [qsq].[query_id] = {@QueryID}'
	SET @PopulateQueryPlanIDs = REPLACE(@PopulateQueryPlanIDs,	'{@DatabaseName}',	@DatabaseName)
	SET @PopulateQueryPlanIDs = REPLACE(@PopulateQueryPlanIDs,	'{@QueryID}',		CAST(@QueryID AS NVARCHAR(32)))
END

IF (@VerboseMode = 1) PRINT (@PopulateQueryPlanIDs)
EXECUTE (@PopulateQueryPlanIDs)
-- Get list of QueryIDs, PlanIDs and QueryTextIDs to be analyzed - END


IF (@RuntimeStats	=	1)
--------------------------
BEGIN -- RuntimeStats Load
--------------------------	
	-- Definition of temp table to store the runtime stats for each plan in #QueryPlanIDs - START
	DROP TABLE IF EXISTS #RuntimeStats
	CREATE TABLE #RuntimeStats
	(
		 [RuntimeStatsIntervalID]	SYSNAME	NOT NULL
		,[QueryID]					BIGINT	NOT NULL
		,[PlanID]					BIGINT	NOT NULL
		,[Executions]				BIGINT	NOT NULL
		,[TR_CPUTime]				BIGINT	NOT NULL
	    ,[TR_Duration]				BIGINT	NOT NULL
		,[TR_LogicalIOReads]		BIGINT	NOT NULL
	    ,[TR_LogicalIOWrites]		BIGINT	NOT NULL
	    ,[TR_PhysicalIOReads]		BIGINT	NOT NULL
	    ,[TR_NumPhysicalIOReads]	BIGINT	NOT NULL
	    ,[TR_CLRTime]				BIGINT	NOT NULL
	    ,[TR_QueryMaxUsedMemory]	BIGINT	NOT NULL
	    ,[TR_Rowcount]				BIGINT	NOT NULL
	    ,[TR_LogBytesUsed]			BIGINT	NOT NULL
	    ,[TR_TempDBSpaceUsed]		BIGINT	NOT NULL
	)
	-- Definition of temp table to store the runtime stats for each plan in #QueryPlanIDs - END
	
	-- Query to extract the runtime stats - START
	DECLARE @SqlCommand2PopulateRuntimeStats			NVARCHAR(MAX)
	SET @SqlCommand2PopulateRuntimeStats = 'USE [{@DatabaseName}];
INSERT INTO #RuntimeStats
SELECT
     [qsrsi].[runtime_stats_interval_id]
	,[p].[QueryID]
	,[p].[PlanID]
	,[qsrs].[count_executions]
    ,[qsrs].[count_executions] * [qsrs].[avg_cpu_time]
    ,[qsrs].[count_executions] * [qsrs].[avg_duration]
	,[qsrs].[count_executions] * [qsrs].[avg_logical_io_reads]
    ,[qsrs].[count_executions] * [qsrs].[avg_logical_io_writes]
    ,[qsrs].[count_executions] * [qsrs].[avg_physical_io_reads]
    ,[qsrs].[count_executions] * [qsrs].[avg_num_physical_io_reads]
    ,[qsrs].[count_executions] * [qsrs].[avg_clr_time]
    ,[qsrs].[count_executions] * [qsrs].[avg_query_max_used_memory]
    ,[qsrs].[count_executions] * [qsrs].[avg_rowcount]
    ,[qsrs].[count_executions] * [qsrs].[avg_log_bytes_used]
    ,[qsrs].[count_executions] * [qsrs].[avg_tempdb_space_used]
FROM [sys].[query_store_runtime_stats] [qsrs]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [qsrs].[runtime_stats_interval_id]
INNER JOIN #QueryPlanIDs [p]
ON [qsrs].[plan_id] = [p].[PlanID]
WHERE
	(
		(	
			[qsrsi].[start_time] BETWEEN ''{@StartTime}'' AND ''{@EndTime}''
		AND [qsrsi].[end_time] BETWEEN ''{@StartTime}'' AND ''{@EndTime}''
		)
		AND
		(
			   ([qsrs].[first_execution_time] >= ''{@StartTime}'' AND [qsrs].[last_execution_time] < ''{@EndTime}'')
			OR ([qsrs].[first_execution_time] <= ''{@StartTime}'' AND [qsrs].[last_execution_time] > ''{@StartTime}'')
			OR ([qsrs].[first_execution_time] <= ''{@EndTime}''   AND [qsrs].[last_execution_time] > ''{@EndTime}'')
		)
	)'
	
		SET @SqlCommand2PopulateRuntimeStats = REPLACE(@SqlCommand2PopulateRuntimeStats, '{@DatabaseName}',			@DatabaseName)
		SET @SqlCommand2PopulateRuntimeStats = REPLACE(@SqlCommand2PopulateRuntimeStats, '{@StartTime}',			CAST(@StartTime AS NVARCHAR(34)))
		SET @SqlCommand2PopulateRuntimeStats = REPLACE(@SqlCommand2PopulateRuntimeStats, '{@EndTime}',				CAST(@EndTime AS NVARCHAR(34)))
	
		IF(@VerboseMode = 1)	PRINT (@SqlCommand2PopulateRuntimeStats)
		EXECUTE (@SqlCommand2PopulateRuntimeStats)
	-- Query to extract the runtime stats - END
--------------------------
END   -- RuntimeStats Load
--------------------------	
	


IF ( (@RuntimeStats	=	1)	AND (@WaitStats	=	0) )
--------------------------
BEGIN -- RuntimeStats Show
--------------------------	
	IF(@PlanAggregation		=	1)
	BEGIN -- RuntimeStats Show | Plan 
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats Show | Plan | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	[qsrsi].[start_time]
,[EndTime]							=	[qsrsi].[end_time]
,[r].[QueryID]
,[r].[PlanID]			
,[r].[Executions]			
,[TotalRuntime_CPUTime]				=	[r].[TR_CPUTime]			
,[TotalRuntime_Duration]			=	[r].[TR_Duration]			
,[TotalRuntime_LogicalIOReads]		=	[r].[TR_LogicalIOReads]	
,[TotalRuntime_LogicalIOWrites]		=	[r].[TR_LogicalIOWrites]	
,[TotalRuntime_PhysicalIOReads]		=	[r].[TR_PhysicalIOReads]	
,[TotalRuntime_NumPhysicalIOReads]	=	[r].[TR_NumPhysicalIOReads]
,[TotalRuntime_CLRTime]				=	[r].[TR_CLRTime]			
,[TotalRuntime_QueryMaxUsedMemory]	=	[r].[TR_QueryMaxUsedMemory]
,[TotalRuntime_Rowcount]			=	[r].[TR_Rowcount]			
,[TotalRuntime_LogBytesUsed]		=	[r].[TR_LogBytesUsed]
,[TotalRuntime_TempDBSpaceUsed]		=	[r].[TR_TempDBSpaceUsed]
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Plan | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats Show | Plan | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	MIN([qsrsi].[start_time])
,[EndTime]							=	MAX([qsrsi].[end_time])
,[r].[QueryID]
,[r].[PlanID]			
,[Executions]						=	SUM([r].[Executions])
,[TotalRuntime_CPUTime]				=	SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration]			=	SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads]		=	SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites]		=	SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads]		=	SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads]	=	SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime]				=	SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory]	=	SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount]			=	SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed]		=	SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed]		=	SUM([r].[TR_TempDBSpaceUsed])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]
	,[r].[PlanID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Plan | Totals | SimplifiedReports

		IF	(@Averages			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats Show | Plan | Averages | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]						=	''{@ServerIdentifier}''
,[DatabaseName]							=	DB_NAME()
,[StartTime]							=	[qsrsi].[start_time]
,[EndTime]								=	[qsrsi].[end_time]
,[r].[QueryID]
,[r].[PlanID]			
,[r].[Executions]
,[AvgRuntime_CPUTime]				=	CAST(SUM([r].[TR_CPUTime]				)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_Duration]				=	CAST(SUM([r].[TR_Duration]				)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_LogicalIOReads]		=	CAST(SUM([r].[TR_LogicalIOReads]		)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_LogicalIOWrites]		=	CAST(SUM([r].[TR_LogicalIOWrites]		)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_PhysicalIOReads]		=	CAST(SUM([r].[TR_PhysicalIOReads]		)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_NumPhysicalIOReads]	=	CAST(SUM([r].[TR_NumPhysicalIOReads]	)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_CLRTime]				=	CAST(SUM([r].[TR_CLRTime]				)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_QueryMaxUsedMemory]	=	CAST(SUM([r].[TR_QueryMaxUsedMemory]	)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_Rowcount]				=	CAST(SUM([r].[TR_Rowcount]				)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_LogBytesUsed]			=	CAST(SUM([r].[TR_LogBytesUsed]			)	AS FLOAT)	/	[r].[Executions]
,[AvgRuntime_TempDBSpaceUsed]		=	CAST(SUM([r].[TR_TempDBSpaceUsed]		)	AS FLOAT)	/	[r].[Executions]
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[r].[QueryID]
	,[r].[PlanID]			
	,[r].[Executions]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Plan | Averages | IntervalReports

		IF	(@Averages			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats Show | Plan | Averages | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]						=	''{@ServerIdentifier}''
,[DatabaseName]							=	DB_NAME()
,[StartTime]							=	MIN([qsrsi].[start_time])
,[EndTime]								=	MAX([qsrsi].[end_time])
,[r].[QueryID]
,[r].[PlanID]	
,[Executions] =	SUM([r].[Executions])
,[AvgRuntime_CPUTime] =	CAST(SUM([r].[TR_CPUTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] =	CAST(SUM([r].[TR_LogicalIOWrites]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] =	CAST(SUM([r].[TR_PhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed]) AS FLOAT)/SUM([r].[Executions])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]
	,[r].[PlanID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Plan | Averages | SimplifiedReports
	END	 -- RuntimeStats Show | Plan 
	
	IF(@QueryAggregation		=	1)
	BEGIN -- RuntimeStats Show | Query 
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats Show | Query | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	[qsrsi].[start_time]
,[EndTime]							=	[qsrsi].[end_time]
,[r].[QueryID]
,[Executions] = SUM([r].[Executions])		
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime]	= SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[r].[QueryID]
	ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Query | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats Show | Query | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	MIN([qsrsi].[start_time])
,[EndTime]							=	MAX([qsrsi].[end_time])
,[r].[QueryID]
,[Executions] = SUM([r].[Executions])		
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]
	ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Query | Totals | SimplifiedReports

		IF	(@Averages			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats Show | Query | Averages | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]						=	''{@ServerIdentifier}''
,[DatabaseName]							=	DB_NAME()
,[StartTime]							=	[qsrsi].[start_time]
,[EndTime]								=	[qsrsi].[end_time]
,[r].[QueryID]
,[Executions] = SUM([r].[Executions])
,[AvgRuntime_CPUTime] = CAST(SUM([r].[TR_CPUTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] = CAST(SUM([r].[TR_LogicalIOWrites]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] = CAST(SUM([r].[TR_PhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed]) AS FLOAT)/SUM([r].[Executions])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[r].[QueryID]
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Query | Averages | IntervalReports

		IF	(@Averages			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats Show | Query | Averages | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]						=	''{@ServerIdentifier}''
,[DatabaseName]							=	DB_NAME()
,[StartTime]							=	MIN([qsrsi].[start_time])
,[EndTime]								=	MAX([qsrsi].[end_time])
,[r].[QueryID]
,[Executions] = SUM([r].[Executions])
,[AvgRuntime_CPUTime] = CAST(SUM([r].[TR_CPUTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] = CAST(SUM([r].[TR_LogicalIOWrites]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] = CAST(SUM([r].[TR_PhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed]) AS FLOAT)/SUM([r].[Executions])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Query | Averages | SimplifiedReports
	END -- RuntimeStats Show | Query
	


	IF	(	(@ObjectAggregation		=	1) AND (@ObjectName IS NOT NULL)	)
	BEGIN -- RuntimeStats Show | Object
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats Show | Object | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	[qsrsi].[start_time]
,[EndTime]							=	[qsrsi].[end_time]
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	ORDER BY 1,2'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Object | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats Show | Object | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	MIN([qsrsi].[start_time])
,[EndTime]							=	MAX([qsrsi].[end_time])
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
FROM #RuntimeStats [r]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
ORDER BY 1'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats Show | Object | Totals | SimplifiedReports
	END -- RuntimeStats Show | Object
--------------------------
END   -- RuntimeStats Show
--------------------------



IF (@WaitStats		=	1)
-----------------------
BEGIN -- WaitStats Load
-----------------------	
	-- Definition of temp table to store the runtime stats for each plan in #QueryPlanIDs - START
	DROP TABLE IF EXISTS #WaitStats
	CREATE TABLE #WaitStats
	(
		 [RuntimeStatsIntervalID]	SYSNAME	NOT NULL
		,[QueryID]					BIGINT	NOT NULL
		,[PlanID]					BIGINT	NOT NULL
		,[Executions]				BIGINT	NOT NULL
		,[TW_Unknown]				BIGINT	NOT NULL
		,[TW_CPU]					BIGINT	NOT NULL
		,[TW_WorkerThread]			BIGINT	NOT NULL
		,[TW_Lock]					BIGINT	NOT NULL
		,[TW_Latch]					BIGINT	NOT NULL
		,[TW_BufferLatch]			BIGINT	NOT NULL
		,[TW_BufferIO]				BIGINT	NOT NULL
		,[TW_Compilation]			BIGINT	NOT NULL
		,[TW_SQLCLR]				BIGINT	NOT NULL
		,[TW_Mirroring]				BIGINT	NOT NULL
		,[TW_Transaction]			BIGINT	NOT NULL
		,[TW_Idle]					BIGINT	NOT NULL
		,[TW_Preemptive]			BIGINT	NOT NULL
		,[TW_ServiceBroker]			BIGINT	NOT NULL
		,[TW_TranLogIO]				BIGINT	NOT NULL
		,[TW_NetworkIO]				BIGINT	NOT NULL
		,[TW_Parallelism]			BIGINT	NOT NULL
		,[TW_Memory]				BIGINT	NOT NULL
		,[TW_UserWait]				BIGINT	NOT NULL
		,[TW_Tracing]				BIGINT	NOT NULL
		,[TW_FullTextSearch]		BIGINT	NOT NULL
		,[TW_OtherDiskIO]			BIGINT	NOT NULL
		,[TW_Replication]			BIGINT	NOT NULL
		,[TW_LogRateGovernor]		BIGINT	NOT NULL
	)
	-- Definition of temp table to store the runtime stats for each plan in #QueryPlanIDs - END

	DECLARE @SqlCommand2PopulateWaitStats			NVARCHAR(MAX)
	SET @SqlCommand2PopulateWaitStats = 'USE [{@DatabaseName}];
WITH [executions] AS
(
	SELECT DISTINCT
		 [qsrsi].[runtime_stats_interval_id] AS [RuntimeStatsIntervalID]
		,[q].[QueryID]
		,[q].[PlanID]
		,[qsrs].[count_executions] AS [Executions]
	FROM [sys].[query_store_runtime_stats] [qsrs]
	INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
	ON [qsrsi].[runtime_stats_interval_id] = [qsrs].[runtime_stats_interval_id]
	INNER JOIN #QueryPlanIDs [q]
	ON [qsrs].[plan_id] = [q].[PlanID]
	WHERE
	(
		([qsrsi].[start_time] BETWEEN ''{@StartTime}'' AND ''{@EndTime}'') AND ([qsrsi].[end_time] BETWEEN ''{@StartTime}'' AND ''{@EndTime}'')
		AND
		(
			   ([qsrs].[first_execution_time] >= ''{@StartTime}'' AND [qsrs].[last_execution_time] < ''{@EndTime}'')
			OR ([qsrs].[first_execution_time] <= ''{@StartTime}'' AND [qsrs].[last_execution_time] > ''{@StartTime}'')
			OR ([qsrs].[first_execution_time] <= ''{@EndTime}''   AND [qsrs].[last_execution_time] > ''{@EndTime}'')
		)
	)
)
,[cte] AS
(
SELECT  
	 [RuntimeStatsIntervalID]
	,[QueryID]
	,[PlanID]
	,[Executions]
	,CAST(COALESCE(SUM([PivotTable].[Unknown]			)	,0) AS BIGINT)	AS [Unknown]
	,CAST(COALESCE(SUM([PivotTable].[CPU]				)	,0) AS BIGINT)	AS [CPU]
	,CAST(COALESCE(SUM([PivotTable].[Worker Thread]		)	,0) AS BIGINT)	AS [WorkerThread]
	,CAST(COALESCE(SUM([PivotTable].[Lock]				)	,0) AS BIGINT)	AS [Lock]
	,CAST(COALESCE(SUM([PivotTable].[Latch]				)	,0) AS BIGINT)	AS [Latch]
	,CAST(COALESCE(SUM([PivotTable].[Buffer Latch]		)	,0) AS BIGINT)	AS [BufferLatch]
	,CAST(COALESCE(SUM([PivotTable].[Buffer IO]			)	,0) AS BIGINT)	AS [BufferIO]
	,CAST(COALESCE(SUM([PivotTable].[Compilation]		)	,0) AS BIGINT)	AS [Compilation]
	,CAST(COALESCE(SUM([PivotTable].[SQL CLR]			)	,0) AS BIGINT)	AS [SQLCLR]
	,CAST(COALESCE(SUM([PivotTable].[Mirroring]			)	,0) AS BIGINT)	AS [Mirroring]
	,CAST(COALESCE(SUM([PivotTable].[Transaction]		)	,0) AS BIGINT)	AS [Transaction]
	,CAST(COALESCE(SUM([PivotTable].[Idle]				)	,0) AS BIGINT)	AS [Idle]
	,CAST(COALESCE(SUM([PivotTable].[Preemptive]		)	,0) AS BIGINT)	AS [Preemptive]
	,CAST(COALESCE(SUM([PivotTable].[Service Broker]	)	,0) AS BIGINT)	AS [ServiceBroker]
	,CAST(COALESCE(SUM([PivotTable].[Tran Log IO]		)	,0) AS BIGINT)	AS [TranLogIO]
	,CAST(COALESCE(SUM([PivotTable].[Network IO]		)	,0) AS BIGINT)	AS [NetworkIO]
	,CAST(COALESCE(SUM([PivotTable].[Parallelism]		)	,0) AS BIGINT)	AS [Parallelism]
	,CAST(COALESCE(SUM([PivotTable].[Memory]			)	,0) AS BIGINT)	AS [Memory]
	,CAST(COALESCE(SUM([PivotTable].[User Wait]			)	,0) AS BIGINT)	AS [UserWait]
	,CAST(COALESCE(SUM([PivotTable].[Tracing]			)	,0) AS BIGINT)	AS [Tracing]
	,CAST(COALESCE(SUM([PivotTable].[Full Text Search]	)	,0) AS BIGINT)	AS [FullTextSearch]
	,CAST(COALESCE(SUM([PivotTable].[Other Disk IO]		)	,0) AS BIGINT)	AS [OtherDiskIO]
	,CAST(COALESCE(SUM([PivotTable].[Replication]		)	,0) AS BIGINT)	AS [Replication]
	,CAST(COALESCE(SUM([PivotTable].[Log Rate Governor]	)	,0) AS BIGINT)	AS [LogRateGovernor]
FROM [sys].[query_store_wait_stats] [qsws]
INNER JOIN [executions] [e]
ON  [qsws].[runtime_stats_interval_id]	= [e].[RuntimeStatsIntervalID]
AND [qsws].[plan_id]					= [e].[PlanID]
PIVOT (
	SUM([total_query_wait_time_ms])
	FOR [wait_category_desc] IN 
	(
		 [Unknown]
		,[CPU]
		,[Worker Thread]
		,[Lock]
		,[Latch]
		,[Buffer Latch]
		,[Buffer IO]
		,[Compilation]
		,[SQL CLR]
		,[Mirroring]
		,[Transaction]
		,[Idle]
		,[Preemptive]
		,[Service Broker]
		,[Tran Log IO]
		,[Network IO]
		,[Parallelism]
		,[Memory]
		,[User Wait]
		,[Tracing]
		,[Full Text Search]
		,[Other Disk IO]
		,[Replication]
		,[Log Rate Governor]
	)
)
AS [PivotTable]
GROUP BY
	 [RuntimeStatsIntervalID]
	,[QueryID]
	,[PlanID]
	,[Executions]
)
INSERT INTO #WaitStats
SELECT * FROM [cte]'
	SET @SqlCommand2PopulateWaitStats = REPLACE(@SqlCommand2PopulateWaitStats, '{@DatabaseName}',			@DatabaseName)
	SET @SqlCommand2PopulateWaitStats = REPLACE(@SqlCommand2PopulateWaitStats, '{@StartTime}',				CAST(@StartTime AS NVARCHAR(34)))
	SET @SqlCommand2PopulateWaitStats = REPLACE(@SqlCommand2PopulateWaitStats, '{@EndTime}',				CAST(@EndTime AS NVARCHAR(34)))
	
	IF(@VerboseMode = 1)	PRINT (@SqlCommand2PopulateWaitStats)
	EXECUTE (@SqlCommand2PopulateWaitStats)
-----------------------
END   -- WaitStats Load
-----------------------


IF ( (@RuntimeStats	=	0)	AND (@WaitStats	=	1) )
-----------------------
BEGIN -- WaitStats Show
-----------------------	
	IF(@PlanAggregation		=	1)
	BEGIN -- WaitStats Show | Plan
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- WaitStats Show | Plan | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	[qsrsi].[start_time]
,[EndTime]						=	[qsrsi].[end_time]
,[w].[QueryID]				
,[w].[PlanID]				
,[w].[Executions]			
,[TotalWaits_Unknown] = [w].[TW_Unknown]	
,[TotalWaits_CPU] = [w].[TW_CPU]		
,[TotalWaits_WorkerThread] = [w].[TW_WorkerThread]
,[TotalWaits_Lock] = [w].[TW_Lock]		
,[TotalWaits_Latch] = [w].[TW_Latch]		
,[TotalWaits_BufferLatch] = [w].[TW_BufferLatch]
,[TotalWaits_BufferIO] = [w].[TW_BufferIO]	
,[TotalWaits_Compilation] = [w].[TW_Compilation]
,[TotalWaits_SQLCLR] = [w].[TW_SQLCLR]		
,[TotalWaits_Mirroring] = [w].[TW_Mirroring]	
,[TotalWaits_Transaction] = [w].[TW_Transaction]
,[TotalWaits_Idle] = [w].[TW_Idle]		
,[TotalWaits_Preemptive] = [w].[TW_Preemptive]	
,[TotalWaits_ServiceBroker] = [w].[TW_ServiceBroker]
,[TotalWaits_TranLogIO] = [w].[TW_TranLogIO]	
,[TotalWaits_NetworkIO] = [w].[TW_NetworkIO]	
,[TotalWaits_Parallelism] = [w].[TW_Parallelism]
,[TotalWaits_Memory] = [w].[TW_Memory]		
,[TotalWaits_UserWait] = [w].[TW_UserWait]	
,[TotalWaits_Tracing] = [w].[TW_Tracing]	
,[TotalWaits_FullTextSearch] = [w].[TW_FullTextSearch]
,[TotalWaits_OtherDiskIO] = [w].[TW_OtherDiskIO]
,[TotalWaits_Replication] = [w].[TW_Replication]
,[TotalWaits_LogRateGovernor] = [w].[TW_LogRateGovernor]
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Plan | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- WaitStats Show | Plan | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	MIN([qsrsi].[start_time])
,[EndTime]						=	MAX([qsrsi].[end_time])
,[w].[QueryID]				
,[w].[PlanID]				
,[Executions] = SUM([w].[Executions])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [w].[QueryID]				
	,[w].[PlanID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Plan | Totals | SimplifiedReports


		IF(@Averages			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- WaitStats Show | Plan | Averages | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	[qsrsi].[start_time]
,[EndTime]							=	[qsrsi].[end_time]
,[w].[QueryID]
,[w].[PlanID]			
,[w].[Executions]		
,[AvgWait_Unknown] = CAST([w].[TW_Unknown] AS FLOAT)/[w].[Executions]
,[AvgWait_CPU] = CAST([w].[TW_CPU] AS FLOAT)/[w].[Executions]
,[AvgWait_WorkerThread] = CAST([w].[TW_WorkerThread] AS FLOAT)/[w].[Executions]
,[AvgWait_Lock] = CAST([w].[TW_Lock] AS FLOAT)/[w].[Executions]
,[AvgWait_Latch] = CAST([w].[TW_Latch] AS FLOAT)/[w].[Executions]
,[AvgWait_BufferLatch] = CAST([w].[TW_BufferLatch] AS FLOAT)/[w].[Executions]
,[AvgWait_BufferIO] = CAST([w].[TW_BufferIO] AS FLOAT)/[w].[Executions]
,[AvgWait_Compilation] = CAST([w].[TW_Compilation] AS FLOAT)/[w].[Executions]
,[AvgWait_SQLCLR] = CAST([w].[TW_SQLCLR] AS FLOAT)/[w].[Executions]
,[AvgWait_Mirroring] = CAST([w].[TW_Mirroring] AS FLOAT)/[w].[Executions]
,[AvgWait_Transaction] = CAST([w].[TW_Transaction] AS FLOAT)/[w].[Executions]
,[AvgWait_Idle] = CAST([w].[TW_Idle] AS FLOAT)/[w].[Executions]
,[AvgWait_Preemptive] = CAST([w].[TW_Preemptive] AS FLOAT)/[w].[Executions]
,[AvgWait_ServiceBroker] = CAST([w].[TW_ServiceBroker] AS FLOAT)/[w].[Executions]
,[AvgWait_TranLogIO] = CAST([w].[TW_TranLogIO] AS FLOAT)/[w].[Executions]
,[AvgWait_NetworkIO] = CAST([w].[TW_NetworkIO] AS FLOAT)/[w].[Executions]
,[AvgWait_Parallelism] = CAST([w].[TW_Parallelism] AS FLOAT)/[w].[Executions]
,[AvgWait_Memory] = CAST([w].[TW_Memory] AS FLOAT)/[w].[Executions]
,[AvgWait_UserWait] = CAST([w].[TW_UserWait] AS FLOAT)/[w].[Executions]
,[AvgWait_Tracing] = CAST([w].[TW_Tracing] AS FLOAT)/[w].[Executions]
,[AvgWait_FullTextSearch] = CAST([w].[TW_FullTextSearch] AS FLOAT)/[w].[Executions]
,[AvgWait_OtherDiskIO] = CAST([w].[TW_OtherDiskIO] AS FLOAT)/[w].[Executions]
,[AvgWait_Replication] = CAST([w].[TW_Replication] AS FLOAT)/[w].[Executions]
,[AvgWait_LogRateGovernor] = CAST([w].[TW_LogRateGovernor] AS FLOAT)/[w].[Executions]
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Plan | Averages | IntervalReports

		IF(@Averages			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- WaitStats Show | Plan | Averages | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	MIN([qsrsi].[start_time])
,[EndTime]							=	MAX([qsrsi].[end_time])
,[w].[QueryID]
,[w].[PlanID]		
,[Executions] = SUM([w].[Executions])
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor]) AS FLOAT)/SUM([w].[Executions])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [w].[QueryID]				
	,[w].[PlanID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Plan | Averages | SimplifiedReports
 	END	-- WaitStats Show | Plan
	


	IF(@QueryAggregation		=	1)
	BEGIN -- WaitStats Show | Query
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- WaitStats Show | Query | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	[qsrsi].[start_time]
,[EndTime]						=	[qsrsi].[end_time]
,[w].[QueryID]				
,[Executions] = SUM([w].[Executions])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[w].[QueryID]
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Query | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- WaitStats Show | Query | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	MIN([qsrsi].[start_time])
,[EndTime]						=	MAX([qsrsi].[end_time])
,[w].[QueryID]				
,[Executions] = SUM([w].[Executions])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [w].[QueryID]
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Query | Totals | SimplifiedReports


		IF(@Averages			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- WaitStats Show | Query | Averages | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	[qsrsi].[start_time]
,[EndTime]						=	[qsrsi].[end_time]
,[w].[QueryID]
,[Executions] = SUM([w].[Executions])		
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor]) AS FLOAT)/SUM([w].[Executions])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[w].[QueryID]
	ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Query | Averages | IntervalReports


		IF(@Averages			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- WaitStats Show | Query | Averages | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	MIN([qsrsi].[start_time])
,[EndTime]						=	MAX([qsrsi].[end_time])
,[w].[QueryID]
,[Executions] = SUM([w].[Executions])		
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication]) AS FLOAT)/SUM([w].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor]) AS FLOAT)/SUM([w].[Executions])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [w].[QueryID]
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Query | Averages | SimplifiedReports
	END -- WaitStats Show | Query
	
	IF	(	(@ObjectAggregation		=	1) AND (@ObjectName IS NOT NULL)	)
	BEGIN -- WaitStats Show | Object
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- WaitStats Show | Object | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	[qsrsi].[start_time]
,[EndTime]						=	[qsrsi].[end_time]
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	ORDER BY 1'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Object | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- WaitStats Show | Object | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
SELECT
 [ServerIdentifier]				=	''{@ServerIdentifier}''
,[DatabaseName]					=	DB_NAME()
,[StartTime]					=	MIN([qsrsi].[start_time])
,[EndTime]						=	MAX([qsrsi].[end_time])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #WaitStats [w]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [w].[RuntimeStatsIntervalID]
ORDER BY 1'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- WaitStats Show | Object | Totals | SimplifiedReports
	END -- WaitStats Show | Object
-----------------------
END   -- WaitStats Show
-----------------------





IF ( (@RuntimeStats	=	1)	AND (@WaitStats	=	1) )
-------------------------------------------
BEGIN -- RuntimeStats & WaitStats Show
-------------------------------------------
	IF(@PlanAggregation		=	1)
	BEGIN -- RuntimeStats & WaitStats Show | Plan
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Plan | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]					= ''{@ServerIdentifier}''
,[DatabaseName]						= DB_NAME()
,[StartTime]						= [qsrsi].[start_time]
,[EndTime]							= [qsrsi].[end_time]
,[r].[QueryID]				
,[r].[PlanID]				
,[r].[Executions]	
,[TotalRuntime_CPUTime] = [r].[TR_CPUTime]			
,[TotalRuntime_Duration] = [r].[TR_Duration]			
,[TotalRuntime_LogicalIOReads] = [r].[TR_LogicalIOReads]	
,[TotalRuntime_LogicalIOWrites] = [r].[TR_LogicalIOWrites]	
,[TotalRuntime_PhysicalIOReads] = [r].[TR_PhysicalIOReads]	
,[TotalRuntime_NumPhysicalIOReads] = [r].[TR_NumPhysicalIOReads]
,[TotalRuntime_CLRTime] = [r].[TR_CLRTime]			
,[TotalRuntime_QueryMaxUsedMemory] = [r].[TR_QueryMaxUsedMemory]
,[TotalRuntime_Rowcount] = [r].[TR_Rowcount]			
,[TotalRuntime_LogBytesUsed] = [r].[TR_LogBytesUsed]		
,[TotalRuntime_TempDBSpaceUsed] = [r].[TR_TempDBSpaceUsed]	
,[TotalWait_Unknown] = [w].[TW_Unknown]	
,[TotalWait_CPU] = [w].[TW_CPU]		
,[TotalWait_WorkerThread] = [w].[TW_WorkerThread]
,[TotalWait_Lock] = [w].[TW_Lock]		
,[TotalWait_BufferLatch] = [w].[TW_BufferLatch]
,[TotalWait_BufferIO] = [w].[TW_BufferIO]	
,[TotalWait_Compilation] = [w].[TW_Compilation]
,[TotalWait_SQLCLR] = [w].[TW_SQLCLR]		
,[TotalWait_Mirroring] = [w].[TW_Mirroring]	
,[TotalWait_Transaction] = [w].[TW_Transaction]
,[TotalWait_Idle] = [w].[TW_Idle]		
,[TotalWait_Preemptive] = [w].[TW_Preemptive]	
,[TotalWait_ServiceBroker] = [w].[TW_ServiceBroker]
,[TotalWait_TranLogIO] = [w].[TW_TranLogIO]	
,[TotalWait_NetworkIO] = [w].[TW_NetworkIO]	
,[TotalWait_Parallelism] = [w].[TW_Parallelism]
,[TotalWait_Memory] = [w].[TW_Memory]		
,[TotalWait_UserWait] = [w].[TW_UserWait]	
,[TotalWait_Tracing] = [w].[TW_Tracing]	
,[TotalWait_FullTextSearch] = [w].[TW_FullTextSearch]
,[TotalWait_OtherDiskIO] = [w].[TW_OtherDiskIO]
,[TotalWait_Replication] = [w].[TW_Replication]
,[TotalWait_LogRateGovernor] = [w].[TW_LogRateGovernor]
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Plan | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Plan | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]					= ''{@ServerIdentifier}''
,[DatabaseName]						= DB_NAME()
,[StartTime]						= MIN([qsrsi].[start_time])
,[EndTime]							= MAX([qsrsi].[end_time])
,[r].[QueryID]				
,[r].[PlanID]				
,[Executions] = SUM([r].[Executions])
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]				
	,[r].[PlanID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Plan | Totals | SimplifiedReports

		IF	(@Averages			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Plan | Averages | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
[ServerIdentifier] = ''{@ServerIdentifier}''
,[DatabaseName] = DB_NAME()
,[StartTime] = [qsrsi].[start_time]
,[EndTime] = [qsrsi].[end_time]
,[r].[QueryID]
,[r].[PlanID]			
,[Executions] = SUM([r].[Executions])
,[AvgRuntime_CPUTime] = CAST(SUM([r].[TR_CPUTime] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration] )	AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] = CAST(SUM([r].[TR_LogicalIOWrites] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] = CAST(SUM([r].[TR_PhysicalIOReads] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed] ) AS FLOAT) / SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication] ) AS FLOAT) / SUM([r].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor] ) AS FLOAT) / SUM([r].[Executions])
FROM #RuntimeStats [r] LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID] = [w].[RuntimeStatsIntervalID]
AND [r].[QueryID] = [w].[QueryID]
AND [r].[PlanID] = [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY [qsrsi].[start_time],[qsrsi].[end_time],[r].[QueryID] ,[r].[PlanID] ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Plan | Averages | IntervalReports

		IF	(@Averages			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Plan | Averages | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
[ServerIdentifier] = ''{@ServerIdentifier}''
,[DatabaseName] = DB_NAME()
,[StartTime] = MIN([qsrsi].[start_time])
,[EndTime] = MAX([qsrsi].[end_time])
,[r].[QueryID]
,[r].[PlanID]			
,[Executions] = SUM([r].[Executions])
,[AvgRuntime_CPUTime] = CAST(SUM([r].[TR_CPUTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] = CAST(SUM([r].[TR_LogicalIOWrites]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] = CAST(SUM([r].[TR_PhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed]	) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor]) AS FLOAT)/SUM([r].[Executions])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]				
	,[r].[PlanID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Plan | Averages | SimplifiedReports
	END -- RuntimeStats & WaitStats Show | Plan



IF(@QueryAggregation		=	1)
	BEGIN -- RuntimeStats & WaitStats Show | Query
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Query | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	[qsrsi].[start_time]
,[EndTime]							=	[qsrsi].[end_time]
,[r].[QueryID]				
,[Executions] = SUM([r].[Executions])
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[r].[QueryID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Query | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Query | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	MIN([qsrsi].[start_time])
,[EndTime]							=	MAX([qsrsi].[end_time])
,[r].[QueryID]				
,[Executions] = SUM([r].[Executions])
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]
ORDER BY 1,3,4'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Query | Totals | SimplifiedReports

		IF	(@Averages			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Query | Averages | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]						= ''{@ServerIdentifier}''
,[DatabaseName]							= DB_NAME()
,[StartTime]							= [qsrsi].[start_time]
,[EndTime]								= [qsrsi].[end_time]
,[r].[QueryID]
,[Executions] = SUM([r].[Executions])
,[AvgRuntime_CPUTime] = CAST(SUM([r].[TR_CPUTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] = CAST(SUM([r].[TR_LogicalIOWrites]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] = CAST(SUM([r].[TR_PhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor]) AS FLOAT)/SUM([r].[Executions])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
	,[r].[QueryID]				
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Query | Averages | IntervalReports

		IF	(@Averages			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Query | Averages | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]						= ''{@ServerIdentifier}''
,[DatabaseName]							= DB_NAME()
,[StartTime]							= MIN([qsrsi].[start_time])
,[EndTime]								= MAX([qsrsi].[end_time])
,[r].[QueryID]	
,[Executions] = SUM([r].[Executions])
,[AvgRuntime_CPUTime] = CAST(SUM([r].[TR_CPUTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Duration] = CAST(SUM([r].[TR_Duration]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOReads] = CAST(SUM([r].[TR_LogicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogicalIOWrites] = CAST(SUM([r].[TR_LogicalIOWrites]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_PhysicalIOReads] = CAST(SUM([r].[TR_PhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_NumPhysicalIOReads] = CAST(SUM([r].[TR_NumPhysicalIOReads]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_CLRTime] = CAST(SUM([r].[TR_CLRTime]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_QueryMaxUsedMemory] = CAST(SUM([r].[TR_QueryMaxUsedMemory]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_Rowcount] = CAST(SUM([r].[TR_Rowcount]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_LogBytesUsed] = CAST(SUM([r].[TR_LogBytesUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgRuntime_TempDBSpaceUsed] = CAST(SUM([r].[TR_TempDBSpaceUsed]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Unknown] = CAST(SUM([w].[TW_Unknown]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_CPU] = CAST(SUM([w].[TW_CPU]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_WorkerThread] = CAST(SUM([w].[TW_WorkerThread]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Lock] = CAST(SUM([w].[TW_Lock]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Latch] = CAST(SUM([w].[TW_Latch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_BufferLatch] = CAST(SUM([w].[TW_BufferLatch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_BufferIO] = CAST(SUM([w].[TW_BufferIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Compilation] = CAST(SUM([w].[TW_Compilation]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_SQLCLR] = CAST(SUM([w].[TW_SQLCLR]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Mirroring] = CAST(SUM([w].[TW_Mirroring]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Transaction] = CAST(SUM([w].[TW_Transaction]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Idle] = CAST(SUM([w].[TW_Idle]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Preemptive] = CAST(SUM([w].[TW_Preemptive]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_ServiceBroker] = CAST(SUM([w].[TW_ServiceBroker]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_TranLogIO] = CAST(SUM([w].[TW_TranLogIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_NetworkIO] = CAST(SUM([w].[TW_NetworkIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Parallelism] = CAST(SUM([w].[TW_Parallelism]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Memory] = CAST(SUM([w].[TW_Memory]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_UserWait] = CAST(SUM([w].[TW_UserWait]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Tracing] = CAST(SUM([w].[TW_Tracing]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_FullTextSearch] = CAST(SUM([w].[TW_FullTextSearch]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_OtherDiskIO] = CAST(SUM([w].[TW_OtherDiskIO]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_Replication] = CAST(SUM([w].[TW_Replication]) AS FLOAT)/SUM([r].[Executions])
,[AvgWait_LogRateGovernor] = CAST(SUM([w].[TW_LogRateGovernor]) AS FLOAT)/SUM([r].[Executions])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [r].[QueryID]				
ORDER BY 1,3'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Query | Averages | SimplifiedReports
	END -- RuntimeStats & WaitStats Show | Query


IF	(	(@ObjectAggregation		=	1) AND (@ObjectName IS NOT NULL)	)
	BEGIN -- RuntimeStats & WaitStats Show | Object
		IF	(@Totals			=	1)	AND (@IntervalReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Object | Totals | IntervalReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	[qsrsi].[start_time]
,[EndTime]							=	[qsrsi].[end_time]
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
GROUP BY
	 [qsrsi].[start_time]
	,[qsrsi].[end_time]
ORDER BY 1'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Object | Totals | IntervalReports

		IF	(@Totals			=	1)	AND (@AggregatedReports	=	1)
		BEGIN -- RuntimeStats & WaitStats Show | Object | Totals | SimplifiedReports
			SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';'+
'SELECT
 [ServerIdentifier]					=	''{@ServerIdentifier}''
,[DatabaseName]						=	DB_NAME()
,[StartTime]						=	MIN([qsrsi].[start_time])
,[EndTime]							=	MAX([qsrsi].[end_time])
,[TotalRuntime_CPUTime] = SUM([r].[TR_CPUTime])
,[TotalRuntime_Duration] = SUM([r].[TR_Duration])
,[TotalRuntime_LogicalIOReads] = SUM([r].[TR_LogicalIOReads])
,[TotalRuntime_LogicalIOWrites] = SUM([r].[TR_LogicalIOWrites])
,[TotalRuntime_PhysicalIOReads] = SUM([r].[TR_PhysicalIOReads])
,[TotalRuntime_NumPhysicalIOReads] = SUM([r].[TR_NumPhysicalIOReads])
,[TotalRuntime_CLRTime] = SUM([r].[TR_CLRTime])
,[TotalRuntime_QueryMaxUsedMemory] = SUM([r].[TR_QueryMaxUsedMemory])
,[TotalRuntime_Rowcount] = SUM([r].[TR_Rowcount])
,[TotalRuntime_LogBytesUsed] = SUM([r].[TR_LogBytesUsed])
,[TotalRuntime_TempDBSpaceUsed] = SUM([r].[TR_TempDBSpaceUsed])
,[TotalWait_Unknown] = SUM([w].[TW_Unknown])
,[TotalWait_CPU] = SUM([w].[TW_CPU])
,[TotalWait_WorkerThread] = SUM([w].[TW_WorkerThread])
,[TotalWait_Lock] = SUM([w].[TW_Lock])
,[TotalWait_Latch] = SUM([w].[TW_Latch])
,[TotalWait_BufferLatch] = SUM([w].[TW_BufferLatch])
,[TotalWait_BufferIO] = SUM([w].[TW_BufferIO])
,[TotalWait_Compilation] = SUM([w].[TW_Compilation])
,[TotalWait_SQLCLR] = SUM([w].[TW_SQLCLR])
,[TotalWait_Mirroring] = SUM([w].[TW_Mirroring])
,[TotalWait_Transaction] = SUM([w].[TW_Transaction])
,[TotalWait_Idle] = SUM([w].[TW_Idle])
,[TotalWait_Preemptive] = SUM([w].[TW_Preemptive])
,[TotalWait_ServiceBroker] = SUM([w].[TW_ServiceBroker])
,[TotalWait_TranLogIO] = SUM([w].[TW_TranLogIO])
,[TotalWait_NetworkIO] = SUM([w].[TW_NetworkIO])
,[TotalWait_Parallelism] = SUM([w].[TW_Parallelism])
,[TotalWait_Memory] = SUM([w].[TW_Memory])
,[TotalWait_UserWait] = SUM([w].[TW_UserWait])
,[TotalWait_Tracing] = SUM([w].[TW_Tracing])
,[TotalWait_FullTextSearch] = SUM([w].[TW_FullTextSearch])
,[TotalWait_OtherDiskIO] = SUM([w].[TW_OtherDiskIO])
,[TotalWait_Replication] = SUM([w].[TW_Replication])
,[TotalWait_LogRateGovernor] = SUM([w].[TW_LogRateGovernor])
FROM #RuntimeStats [r]
LEFT JOIN #WaitStats [w]
ON  [r].[RuntimeStatsIntervalID]	= [w].[RuntimeStatsIntervalID]
AND [r].[QueryID]					= [w].[QueryID]
AND [r].[PlanID]					= [w].[PlanID]
INNER JOIN [sys].[query_store_runtime_stats_interval] [qsrsi]
ON [qsrsi].[runtime_stats_interval_id] = [r].[RuntimeStatsIntervalID]
ORDER BY 1'
			SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
			IF (@VerboseMode = 1) PRINT (@GetResults)
			EXECUTE (@GetResults)
		END -- RuntimeStats & WaitStats Show | Object | Totals | SimplifiedReports
	END -- RuntimeStats & WaitStats Show | Object
-------------------------------------------
END   -- Both RuntimeStats & WaitStats Show
-------------------------------------------




----------------------
BEGIN -- Details Block
----------------------
IF(@QueryDetails		=	1)
BEGIN

	SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
	SELECT DISTINCT
		 [ServerIdentifier]	=	''{@ServerIdentifier}''
		,[DatabaseName]		=	DB_NAME()
		,[q].[QueryID]
		,[q].[QueryTextID]
		,[qsqt].[query_sql_text]
		,[qsqt].[statement_sql_handle]
		,[qsqt].[is_part_of_encrypted_module]
		,[qsqt].[has_restricted_text]
	FROM #QueryPlanIDs [q]
	INNER JOIN [sys].[query_store_query_text] [qsqt]
	ON [q].[QueryTextID] = [qsqt].[query_text_id]'
	SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
	IF (@VerboseMode = 1) PRINT (@GetResults)
	EXECUTE (@GetResults)	
END


IF(@PlanDetails			=	1)
BEGIN
	SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
	SELECT
		 [ServerIdentifier]	=	''{@ServerIdentifier}''
		,[DatabaseName]		=	DB_NAME()
		,[q].[QueryID]
		,[q].[QueryTextID]
		,[q].[PlanID]
		,[qsp].[plan_group_id]
		,[qsp].[engine_version]
		,[qsp].[compatibility_level]
		,[qsp].[query_plan_hash]
		,[query_plan] = TRY_CONVERT(XML, [qsp].[query_plan])
		,[qsp].[is_online_index_plan]
		,[qsp].[is_trivial_plan]
		,[qsp].[is_parallel_plan]
		,[qsp].[is_forced_plan]
		,[qsp].[is_natively_compiled]
		,[qsp].[force_failure_count]
		,[qsp].[last_force_failure_reason_desc]
		,[qsp].[count_compiles]
		,[qsp].[initial_compile_start_time]
		,[qsp].[last_compile_start_time]
		,[qsp].[last_execution_time]
		,[qsp].[avg_compile_duration]
		,[qsp].[last_compile_duration]
		,[qsp].[plan_forcing_type]
		,[qsp].[plan_forcing_type_desc]
	FROM #QueryPlanIDs [q]
	INNER JOIN [sys].[query_store_plan] [qsp]
	ON [q].[PlanID] = [qsp].[plan_id]'
	SET @GetResults = REPLACE(@GetResults, '{@ServerIdentifier}',	@ServerIdentifier)
	IF (@VerboseMode = 1) PRINT (@GetResults)
	EXECUTE (@GetResults)	
END

IF	(	(@ObjectDetails		=	1)	AND	(@ObjectName IS NOT NULL)	)
BEGIN
	SET @GetResults = 'USE ' + QUOTENAME(@DatabaseName) +';
	EXECUTE sp_helptext '''+@ObjectName+''''
	IF (@VerboseMode = 1) PRINT (@GetResults)
	EXECUTE (@GetResults)
END

----------------------
END  -- Details Block
----------------------


END
GO